var iFileName = "Homebrew Syntax - RaceList.js"; // O
RequiredSheetVersion(12.999); // O

RaceList["something catlike"] = { //R
	regExpSearch : /^(?=.*something)(?=.*catlike).*$/i, //r
	name : "Something Catlike", //r
	sortname : "Catlike, Something", //o
	source : ["HB", 0], //r
	plural : "Somethings Catlike", //R
	size : 3, //r
	speed : { //r

		walk : { spd : 30, enc : 20 }, //R 
		},

	toolProfs : [["Musical instrument", 3], ["Thieves' tools", "Dex"], "Tinker's tools"], // o
	languageProfs : ["Elvish", 1], // o
	weapons : ["talons"], //o
	addarmor : "Natural Armor", //o
	vision : [["Darkvision", 60], ["Sunlight Sensitivity", 0]], //o
	dmgres : ["Necrotic", "Radiant"], //op
	savetxt : { // O
		text : ["Dex save vs. area effects: fail \u2015 half dmg, success \u2015 no dmg", "Magic can't put me to sleep"], // O
		immune : ["poison", "disease"], // O
		adv_vs : ["traps", "charmed"] // O
		},

	weaponprofs : [false, false, ["longsword", "shortsword", "longbow", "shortbow"]], //o
	armor : [false, false, false, true], //o
	skills : ["Perception", "Deception"], //o
	skillstxt : "Choose any two skills",  //o
	age : " reach adulthood in their late teens and live around 100 years", //o
	height : " range from 5 to over 6 feet tall (4'9\" + 2d8\")", //o
	weight : " weigh around 155 lb (110 + 2d8 \xD7 2d4 lb)", //o
	heightMetric : " range from 1,5 to over 1,8 metres tall (145 + 5d8 cm)", //o
	weightMetric : " weigh around 70 kg (50 + 5d8 \xD7 4d4 / 10 kg)", //o
	improvements : "Something Catlike: +1 Dexterity, +2 Wisdom;", //r
	scores : [0, 1, 0, 0, 2, 0], //r
	trait : "Something Catlike (+1 Dexterity, +2 Wisdom)\n  ",  //R
	abilitySave : 5,  //o
	variants : ["something great catlike"], //o
	spellcastingAbility : 6, //r
	spellcastingBonus : { //o
		name : "Arcane Initiate", //r
		class : "wizard", //o
		school : ["Evoc", "Abjur"], //o
		level : [0, 4], //O
		ritual : false, //O
		spells : ["light", "mending"], //O
		selection : ["light"], //o
		times : 2, //o
		prepared : true, //o
		atwill : true, //o
		oncesr : true, //o
		oncelr : true, //o
		},

	features : { //o
		"lesser restoration" : { //note the use of lower case characters
			name : "Lesser Restoration", //r
			minlevel : 3, //r
			usages : 1, //o
			recovery : "long rest", //required if "usages" is defined
			tooltip : " (Celestial Legacy)", //o
			action : ["action", ""], //o
			spellcastingBonus : { //optional; works just like the "spellcastingBonus" object defined above
				name : "Celestial Legacy (level 3)",
				spells : ["lesser restoration"],
				selection : ["lesser restoration"],
				oncelr : true,
			},
 
			dmgres : [["Bludgeoning", "Bludg. (nonmagical)"], ["Piercing", "Pierc. (nonmagical)"], ["Slashing", "Slash. (nonmagical)"]], //o

			addMod : { type : "skill", field : "Init", mod : "Int", text : "I can add my Intelligence modifier to initiative rolls." } //optional; 
			This is an object, or an array of similar objects, for adding a modifier to a modifier field. 
			Using this will make it so that the modifier is added to any value that is already there. 
			// The 'mod' attribute can be any combination of numbers, mathematical operators, and three-letter ability score abbreviations 
			// The 'type' attribute can be "skill" or "save", but can also be left empty "" 
			// The 'field' attribute depends on the type, for "skill" it can be the name of a skill, or "Init" for initiative, or "All" for the all skills modifier;
			for "save" it can be the three-letter abbreviation of an ability score, or "All" for the all saves modifier.
			// If the 'type' attribute is left empty, the 'field' attribute has to be the exact name of the field the modifier has to be added to
			// The 'text' attribute is an explanation of why the modifier was added //NOTE: for modifiers to attacks, use calcChanges
		},

		"breath weapon" : {
			name : "Breath Weapon",
			minlevel : 1,
			usages : 1,
			additional : ["2d6", "2d6", "2d6", "2d6", "2d6", "3d6", "3d6", "3d6", "3d6", "3d6", "4d6", "4d6", "4d6", "4d6", "4d6", "5d6", "5d6", "5d6", "5d6", "5d6"],  //optional; text to display in the description field of the limited feature. This can be one value, but can also be an array of 20 values, one for each level.
			recovery : "short rest",
			tooltip : "",

			action : ["action", ""], //optional; adds the name of this choice to the action list when chosen. The options are "action", "bonus action", and "reaction" //the second value in the array is added as a suffix for the "name" of the feature when entered into the action field
		},
	}

};





var iFileName = "Homebrew Syntax - CreatureList.js"; 
RequiredSheetVersion(12.999); 

CreatureList["big cat"] = { 
	name : "Big Cat", 
	source : ["HB", 0], 
	size : 2, // Required; the size of the race (Gargantuan = 0, Huge = 1, Large = 2, Medium = 3, Small = 4, Tiny = 5)

	type : "Fiend",
	subtype : "devil", 
	companion : "mount", // Optional; whether or not the creature will be added to the menu on the companion page, except the ranger's companion, that is based on other criteria.
	/* The options are the following within the quotation marks (note the use of only lower case):
		- "familiar" (Find Familiar spell AND Pact of the Chain warlock feature)
		- "familiar_not_al" [only available from v13 onwards, same as "familiar" but ignored if the sheet is used for Adventurers League]
		- "mount" (Find Steed spell)
		- "steed" (Find Greater Steed spell)
		- "pact_of_the_chain" (Pact of the Chain warlock feature)
		- "companion" (UA: Revised Ranger's Beast Conclave feature)
	Note that for the creature to be available to the PHB ranger, you don't need to do anything
	*/

	alignment : "Unaligned", 
	ac : 11, 
	hp : 19, 
	hd : [3, 10], //[#, die].
	speed : "45 ft", 
	scores : [14, 20, 14, 6, 10, 6], 

	saves : ["", "", "", "", "", ""], 

	skills : { 
		"perception" : 5,
	}, 

	damage_vulnerabilities : "radiant", 
	damage_resistances : "lightning; thunder; bludgeoning, piercing, and slashing from nonmagical weapons", 
	damage_immunities : "poison", 
	condition_immunities : "exhaustion", 
	senses : "Darkvision 60 ft", 
	languages : "", 
	challengeRating : "5", 
	proficiencyBonus : 3, 
	attacksAction : 2, 

	attacks : [{ 
			name : "Slam", 
			ability : 1, 
			damage : [2, 8, "bludgeoning"], // [#, die, type] First entry is the amount of dice, second is the type of dice, and third is the damage type. //"" for die is allowed, meaning no die will be given, only the first digit will be present.
			range : "Melee (10 ft)", // the attack's range
			description : "Two slam attacks as an Attack action", // the attack's description
			modifiers : [1, "", ""], // bonuses to: [to hit, to damage, add ability to damage]; "" means ignore. //For the first two (to hit and to damage), you can also enter the three-letter abbreviation of an ability score (Str, Dex, Con, Int, Wis, or Cha), to have that ability's modifier added to it. //The last one can be either "" (meaning you add ability modifier to damage) or false (meaning you don't add the ability modifier to damage)
			dc : true, // optional, will make the To Hit field display a DC instead. This will overwrite the first value you put in Modifiers
			tooltip : "Each creature in the elemental's space must make a DC 13 Strength saving throw. On a failure, a target takes 15 (3d8 + 2) bludgeoning damage and is flung up 20 feet away from the elemental in a random direction and knocked prone. If a thrown target strikes an object, such as a wall or floor, the target takes 3 (1d6) bludgeoning damage for every 10 feet it was thrown. If the target is thrown at another creature, that creature must succeed on a DC 13 Dexterity saving throw or take the same damage and be knocked prone.\nIf the saving throw is successful, the target takes half the bludgeoning damage and isn't flung away or knocked prone." // optional, this text will be added to the tooltip of the description field of the attack of the Wild Shape. It will do nothing for the attack on the Companion page
		}, 
	], 

	features : [{ 
			name : "Air Form", 
			description : "The writing goes here.", 
		},
	], 

	actions : [{ 
			name : "Ethereal Stride", 
			description : "As an action, theerial Plane, or vice versa.", 
		},
	],

	traits : [{ 
			name : "Air Form", 
			description : "The elemental can enter a hostile.", 
		},
	], 
	
	wildshapeString : "Darkvisir Manual page 124", 
};






var iFileName = "Weapons v13.js";

WeaponsList["sword of purple"] = {

	name : "Sword of Purple",
	source : ["HB", 0],
	defaultExcluded : true,
	regExpSearch : /    /i,
	type : "Martial",
/*	type // REQUIRED //
	
		"AlwaysProf"		// none of the other types apply, always proficient
		"Natural"			// natural weapons (always proficient)
		"Simple"			// simple weapons
		"Martial"			// martial weapons
		"Cantrip"			// cantrips (always proficient)
		"Spell"				// 1st-level and higher spells (always proficient)
		"Improvised Weapons"// improvised weapons such as vial of acid
	   Firearms?
     
	ability : 1,
	TYPE:	number corresponding to the ability score (1 = Str, 2 = Dex, 3 = Con, 4 = Int, 5 = Wis, 6 = Cha)

	abilitytodamage : true,
  
	damage : [2, 4, "piercing"],
			"acid", "bludgeoning", "cold", "fire", "force", "lightning", "necrotic",
			"piercing", "poison", "psychic", "radiant", "slashing", and "thunder"
	
	range : "Melee, 20/60 ft",
	For short- and long ranges, use the notation [short]/[long] [unit]."Melee".
*/
	description : "Finesse, light",

*/
	list : "melee",

		"melee"		// melee weapons
		"ranged"	// ranged weapons
		"spell"		// cantrips and spells
		"improvised"// improvised weapons such as vial of acid
	If you use any other string than the four options given above,
	the weapon will appear at the end of the drop-down options.
	The 'list' attribute is ignored for WeaponsList objects used in the 'weaponOptions' attribute.
	Instead, all things added using the 'weaponOptions' attribute will always be added at the top of the drop-down field.
*/
	weight : 24,

	modifiers : [1, ""],

	isMagicWeapon : true,
/*	isMagicWeapon // OPTIONAL //
	TYPE:	boolean
	USE:	whether (true) or not (false) this weapon is a magical weapon
	This attribute only has an effect for attack calculations and magic item selection.
	Add this if you don't want class features and the like to add modifiers or write "Counts as magical" in the description of this attack.
	Also add this if you don't want this weapon to be an option for magical weapons to add their attributes to.
	Note that if you set the 'type' attribute to "Cantrip" or "Spell", it will already be treated as a magical attack.
	Weapons added by magic items using the 'weaponOptions' attribute will always have this attribute added and set to 'true'.
	Setting this to false is the same as not including this attribute.
*/
	isAlwaysProf : true,
/*	isAlwaysProf // OPTIONAL //
	TYPE:	boolean
	USE:	whether (true) or not (false) the proficiency bonus should always be added for this weapon
	This attribute only has an effect if the character would otherwise not be proficient with this weapon.
	Add this for weapons where the normal way of determining proficiency would not produce the correct result.
	For example, if you set 'type' above to 'Cantrip', setting this to 'true' will have no effect.
	Another example, if you set 'type' above to 'Simple', setting this to 'true' will add proficiency
	even if the character is not proficient with simple weapons (or has the weapon listed in 'other weapon proficiencies').
	Setting this to false is the same as not including this attribute.
*/
	ammo : "bolt",
 "arrow", "bolt", "bullet", "dagger", "dart", "flask", "axe", "javelin",
	"hammer", "needle", "spear", "trident", and "vial" [note the use of only lower case!].
	This list of options can be greater if you add another AmmoList object using the "ammunition (AmmoList).js" syntax file.
}



var iFileName = "Homebrew Syntax - ToolsList.js";
RequiredSheetVersion("13");

ToolsList["purplemancer's tools"] = {
	infoname : "Purplemancer's tools [500 gp]",
	name : "Purplemancer's tools",
	amount : "",
	weight : 12,
	type : "artisan's tools",
		source : ["HB", 0], };
/*
		"artisan's tools"
		"gaming set"
		"musical instrument"
		"New subset x2 min" *\
	

var iFileName = "Homebrew Syntax - GearList.js";
RequiredSheetVersion("13");

GearList["purple bullets"] = {
	infoname : "Bullets, Purple (10) [5 sp]",
	name : "Purple Bullets",
	amount : 10,
	weight : 0.05,
	type : "ammunition",
	source : ["HB", 0],
}
/*
		"ammunition"
		"arcane focus"
		"clothes"
		"druidic focus"
		"holy symbol"
		"saddle"
		"new subset x2 min
*/
	



var iFileName = "Homebrew Syntax - PacksList.js";
RequiredSheetVersion("13");

PacksList["purplepack"] = {
	name : "Purple pack (10 gp)",
	source : ["HB", 0],
	items : [
		["Backpack, with:", "", 5],
		["Rations, days of", 5, 2],
		["Tinderbox", "", 1],
		["Waterskin", "", 5],
		["Hempen rope, feet of", 50, 0.2]
	]
}




var iFileName = "Homebrew Syntax - AmmoList.js";
RequiredSheetVersion("13");

AmmoList["purple bullets"] = {
	name : "Purple Bullets",
	source : ["HB", 0],
	defaultExcluded : true,
	icon : "Bullets",
	weight : 24,
	isMagicAmmo : true,
}

/*
		"Arrows" default
		"Axes"
		"Bullets"
		"Daggers"
		"Flasks"
		"Hammers"
		"Spears"
		"Vials" */
	





var iFileName = "Homebrew Syntax - ArmourList.js";
RequiredSheetVersion("13");

ArmourList["purple mail"] = {
	name : "Purple Mail",
	source : ["HB", 0],
	defaultExcluded : true,
	regExpSearch : /purple mail/i,
	ac : 12,
	type : "heavy",
	dex : 3,
	stealthdis : true,
	addMod : true,
	weight : 24,
	strReq : 15,
}	
/*	dex // OPTIONAL //
	TYPE:	number
	USE:	the maximum Dexterity modifier that can be added to the AC with this armour
	When you set this attribute to -10, the sheet will never add the Dexterity modifier to AC, regardless of its value.
	Doing so essentially works the same as the rules for heavy armour.
	Note that this is normally determined by the 'type' attribute set above.
	For example, if you set the 'type' to "medium", the max Dex mod is 2.
	And when you set the 'type' to "heavy", the Dex mod added to AC is always 0.
	Simply don't include this attribute if the max Dex mod is determined by the armour type or if there is no limit.
*/
	
/*	addMod // OPTIONAL //
	TYPE:	boolean
	USE:	set to 'true' if the armour can have a secondary ability score modifier added to the AC
	This secondary ability score is taken from the name of the armour.
	If the name includes, in brackets the three-letter abbreviation of an ability score
	or "Prof" for the proficiency bonus, that modifier will be added to the AC total.
	For example, if this attribute is true and the name is "Purple Mail (Con)",
	the total AC will the AC of this armour + the Dex mod + the Con mod.
	Even if this attribute is set to true, the armour doesn't need a secondary modifier and
	will work perfectly fine without it being present in the name.
	Setting this to false is the same as not including this attribute.
*/
	
	
addMod : [
	{ type : "skill", field : "Init", mod : "Int", text : "I can add my Intelligence modifier to initiative rolls." },
	{ type : "save", field : "all", mod : "Cha", text : "While I'm conscious I can add my Charisma modifier (min 1) to all my saving throws." },
],
/*	addMod // OPTIONAL //
	TYPE:	array of objects (variable length)
	USE:	add value to a modifier field
	You can have any number of objects in this array, each object must have the same four attributes, all of which are strings:
	1. type
		Can be "skill" or "save", but can also be left empty "".
	2. field
		What to add here depends on the type-
		a)	for "skill" it can be the name of a skill (e.g. "Acrobatics"),
			or "Init" for initiative,
			or "Too" for the optional tool/skill for which you can change the name,
			or "All" for the all skills modifier.
		b)	for "save" it can be the three-letter abbreviation of an ability score,
			or "All" for the all saves modifier.
		c)	for "" it has to be the exact name of the field as used in the PDF.
			common ones include:
			"Proficiency Bonus Modifier",	// modifier field for proficiency bonus
			"Passive Perception Bonus",		// modifier field for passive perception (not normal perception)
	3. mod
		This can be any combination of numbers, mathematical operators,
		and three-letter ability score abbreviations for ability score modifiers,
		or 'Prof' for the proficiency bonus.
		Additionally, you can use min(1|2) and max(1|2), which work like Math.min(1,2) and Math.max(1,2).
		Note that the pipe is used instead of a comma.
		For example, to add the proficiency bonus, Constitution modifier, and subtract 2, it would look like this:
			mod : "Prof+Con-2",
		Or, another example, to add 1, it would look like this:
			mod : 1,
		Or, another example, to add the Charisma modifier with a minimum of 1, it would look like this:
			mod : "min(Cha|1)",
	4. text
		This is an explanation of why the modifier was added and is used in the modifier change dialog.
	NOTE: for modifiers to attacks, use calcChanges.
	NOTE: for modifiers to AC, use extraAC.
*/
